@use "sass:list";
@use "sass:map";
@use "sass:math";
@use './variables';

$cuts: 8, 16, 24, 32, 40, 48;
$shadows: (
  'sm': variables.$drop-shadow-sm,
  'md': variables.$drop-shadow-md,
  'lg': variables.$drop-shadow-lg,
  'xl': variables.$drop-shadow-xl
);

@mixin input-transition {
  transition: all 75ms;
}

@mixin input-transition-long {
  transition: all 250ms;
}

@mixin miter-original($i, $inner: false) {
  clip-path: polygon(
    0 0,
    100% 0,
    100% calc(100% - #{list.nth($cuts, $i)}px + #{if($inner, 0.5px, 0px)}),
    calc(100% - #{list.nth($cuts, $i)}px + #{if($inner, 0.5px, 0px)}) 100%,
    0 100%
  );
}

@mixin miter-shadow($shadow: 'md') {
  filter: #{map.get($shadows, $shadow)};
}

@mixin miter($cut-length: 1, $border-width: 1) {
  $cut: list.nth($cuts, $cut-length);
  $hypotenuse: math.ceil(
    math.hypot($cut + $border-width * 0.25, $cut + $border-width * 0.25)
  );
  $end: 100%;
  $miter-x: calc(#{$end} - #{$cut}px);
  $miter-y: calc(#{$end} - #{$cut}px);

  > :first-child {
    clip-path: polygon(
      $miter-x $end,
      $end $miter-y,
      $end 0,
      0 0,
      0 $end,
      $miter-x $end
    );
    -webkit-clip-path: polygon(
      $miter-x $end,
      $end $miter-y,
      $end 0,
      0 0,
      0 $end,
      $miter-x $end
    );
    position: relative;

    &:after {
      content: '';
      height: #{$hypotenuse}px;
      width: 0;
      padding: 0;
      right: #{$cut - $border-width - $border-width * 0.25}px;
      bottom: -#{$border-width + $border-width * 0.25}px;
      position: absolute;
      border-color: inherit;
      border: inherit;
      border-bottom: none;
      border-right: none;
      border-top: none;

      // Increasing the border width of this slightly gives a more consistent look on the diagonal
      border-width: #{$border-width + $border-width * 0.5}px;
      transform: rotate(45deg);
      transform-origin: bottom;
    }
  }
}
